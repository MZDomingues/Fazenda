unit clsCalculo;

interface

uses System.SysUtils, Vcl.Dialogs;

type
  TCalculo = class
    private
      FValor1 : Double;
      FValor2 : Double;
      FValor3 : Double;
      FValor4 : Double;
    procedure SetValor1(const Value : Double);
    procedure SetValor2(const Value : Double);
    procedure SetValor3(const Value : Double);
    procedure SetValor4(const Value : Double);
    protected
    Public
      property Valor1 : Double read FValor1 write SetValor1;
      property Valor2 : Double read FValor2 write SetValor2;
      property Valor3 : Double read FValor3 write SetValor3;
      property Valor4 : Double read FValor4 write SetValor4;
      function Calcular(nValor1, nValor2, nValor3, nValor4 : Double) : String;
  end;

  TCalculoMedia = class(TCalculo)
    private
    protected
    public
      function Calcular : String;
  end;

  TCalculoMaior = class(TCalculo)
    private
    protected
    public
      function Calcular : String;
  end;

  TCalculoMenor = class(TCalculo)
    private
    protected
    public
      function Calcular : String;
  end;

implementation

{ TCalculo }

function TCalculo.Calcular(nValor1, nValor2, nValor3, nValor4: Double): String;
begin
//
end;

procedure TCalculo.SetValor1(const Value: Double);
begin
  if Value >= 0 then
    FValor1 := Value
  else
    raise Exception.Create('Valor 1 inválido.');
end;

procedure TCalculo.SetValor2(const Value: Double);
begin
  if Value >= 0 then
    FValor2 := Value
  else
    raise Exception.Create('Valor 2 inválido.');
end;

procedure TCalculo.SetValor3(const Value: Double);
begin
  if Value >= 0 then
    FValor3 := Value
  else
    raise Exception.Create('Valor 3 inválido.');
end;

procedure TCalculo.SetValor4(const Value: Double);
begin
  if Value >= 0 then
    FValor4 := Value
  else
    raise Exception.Create('Valor 4 inválido.');
end;


{ TCalculoMedia }

function TCalculoMedia.Calcular: String;
begin
  result := 'Média = ' + FloatToStr(FValor1 + FValor2 + FValor3 + FValor4 / 4);
end;

{ TCalculoMaior }

function TCalculoMaior.Calcular: String;
begin
  result := 'Maior Média = ' + FloatToStr(FValor1 * FValor2);
end;

{ TCalculoMenor }

function TCalculoMenor.Calcular: String;
begin
  result := 'Menor Média = ' + FloatToStr(FValor1 * FValor2);
end;

end.
